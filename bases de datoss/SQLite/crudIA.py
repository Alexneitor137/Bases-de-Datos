import sqlite3
import re

class Colors:
    HEADER = '\033[95m'    # Magenta
    OKBLUE = '\033[94m'    # Blue
    OKCYAN = '\033[96m'    # Cyan
    OKGREEN = '\033[92m'   # Green
    WARNING = '\033[93m'   # Yellow
    FAIL = '\033[91m'      # Red
    ENDC = '\033[0m'       # Reset
    BOLD = '\033[1m'

def is_valid_email(email: str) -> bool:
    pattern = r'^[\w\.-]+@[\w\.-]+\.\w+$'
    return re.match(pattern, email) is not None

def create_table(cursor):
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS clientes (
            identificador INTEGER PRIMARY KEY AUTOINCREMENT,
            nombre TEXT NOT NULL,
            apellidos TEXT NOT NULL,
            email TEXT NOT NULL
        )
    """)

def print_header():
    print(f"{Colors.HEADER}{Colors.BOLD}üìí Programa Agenda SQLite v0.5 - Alejandro Calder√≥n S√°nchez{Colors.ENDC}")
    print("‚îÄ" * 60)

def print_menu():
    print(f"\n{Colors.OKCYAN}üìã {Colors.BOLD}Elige una opci√≥n:{Colors.ENDC}")
    print(f"{Colors.OKGREEN} 1. üÜï Crear cliente")
    print( " 2. üìú Listar clientes")
    print( " 3. ‚úèÔ∏è  Actualizar cliente")
    print( " 4. üóëÔ∏è  Eliminar cliente")
    print( " 5. üîç Buscar cliente")
    print(f" 6. üëã Cerrar programa{Colors.ENDC}")

def prompt_client_info():
    nombre = input(f"{Colors.WARNING}üìù Introduce el nombre: {Colors.ENDC}").strip()
    apellidos = input(f"{Colors.WARNING}üìù Introduce los apellidos: {Colors.ENDC}").strip()
    email = input(f"{Colors.WARNING}üìß Introduce el email: {Colors.ENDC}").strip()

    if not (nombre and apellidos and email):
        print(f"{Colors.FAIL}‚ùå Todos los campos son obligatorios.{Colors.ENDC}")
        return None

    if not is_valid_email(email):
        print(f"{Colors.FAIL}üö´ El email no tiene un formato v√°lido.{Colors.ENDC}")
        return None

    return nombre, apellidos, email

def search_clients(cursor):
    print(f"{Colors.OKBLUE}üîç Buscar cliente{Colors.ENDC}")
    keyword = input(f"{Colors.WARNING}üîé Introduce nombre, apellidos o email para buscar: {Colors.ENDC}").strip()
    if not keyword:
        print(f"{Colors.FAIL}‚ö†Ô∏è El t√©rmino de b√∫squeda no puede estar vac√≠o.{Colors.ENDC}")
        return

    like_term = f"%{keyword}%"
    try:
        cursor.execute("""
            SELECT * FROM clientes
            WHERE nombre LIKE ? COLLATE NOCASE
               OR apellidos LIKE ? COLLATE NOCASE
               OR email LIKE ? COLLATE NOCASE
        """, (like_term, like_term, like_term))
        results = cursor.fetchall()
        if results:
            print(f"{Colors.OKGREEN}‚úÖ Se encontraron {len(results)} resultado(s):{Colors.ENDC}")
            for fila in results:
                print(f"üîπ ID: {fila[0]} | üë§ Nombre: {fila[1]} | üßë‚Äçü§ù‚Äçüßë Apellidos: {fila[2]} | üìß Email: {fila[3]}")
        else:
            print(f"{Colors.WARNING}‚ÑπÔ∏è No se encontraron clientes que coincidan con '{keyword}'.{Colors.ENDC}")
    except sqlite3.Error as e:
        print(f"{Colors.FAIL}‚ùå Error al buscar clientes: {e}{Colors.ENDC}")

def main():
    conexion = sqlite3.connect("empresa.db")
    cursor = conexion.cursor()
    create_table(cursor)

    print_header()

    while True:
        print_menu()

        try:
            opcion = int(input(f"{Colors.WARNING}üëâ Selecciona una opci√≥n (1-6): {Colors.ENDC}"))
        except ValueError:
            print(f"{Colors.FAIL}‚ùå Por favor, introduce un n√∫mero v√°lido.{Colors.ENDC}")
            continue

        if opcion == 1:
            print(f"{Colors.OKBLUE}üÜï Crear nuevo cliente{Colors.ENDC}")
            datos = prompt_client_info()
            if datos is None:
                continue
            nombre, apellidos, email = datos
            try:
                cursor.execute(
                    "INSERT INTO clientes (nombre, apellidos, email) VALUES (?, ?, ?)",
                    (nombre, apellidos, email)
                )
                conexion.commit()
                print(f"{Colors.OKGREEN}üéâ Cliente creado con √©xito.{Colors.ENDC}")
            except sqlite3.Error as e:
                print(f"{Colors.FAIL}‚ùå Error al crear el cliente: {e}{Colors.ENDC}")

        elif opcion == 2:
            print(f"{Colors.OKBLUE}üìú Listado de clientes:{Colors.ENDC}")
            try:
                cursor.execute("SELECT * FROM clientes")
                filas = cursor.fetchall()
                if filas:
                    # Print table header
                    print(f"{Colors.BOLD}{Colors.OKCYAN}")
                    print("‚îå" + "‚îÄ" * 5 + "‚î¨" + "‚îÄ" * 20 + "‚î¨" + "‚îÄ" * 25 + "‚î¨" + "‚îÄ" * 30 + "‚îê")
                    print("‚îÇ ID  ‚îÇ üë§ Nombre           ‚îÇ üßë‚Äçü§ù‚Äçüßë Apellidos          ‚îÇ üìß Email                     ‚îÇ")
                    print("‚îú" + "‚îÄ" * 5 + "‚îº" + "‚îÄ" * 20 + "‚îº" + "‚îÄ" * 25 + "‚îº" + "‚îÄ" * 30 + "‚î§")
                    print(f"{Colors.ENDC}", end="")

                    # Print rows
                    for fila in filas:
                        id_str = str(fila[0]).ljust(4)
                        nombre_str = fila[1][:19].ljust(19)
                        apellidos_str = fila[2][:24].ljust(24)
                        email_str = fila[3][:29].ljust(29)
                        print(f"‚îÇ {id_str}‚îÇ {nombre_str} ‚îÇ {apellidos_str} ‚îÇ {email_str} ‚îÇ")

                    # Table footer
                    print(f"{Colors.BOLD}{Colors.OKCYAN}", end="")
                    print("‚îî" + "‚îÄ" * 5 + "‚î¥" + "‚îÄ" * 20 + "‚î¥" + "‚îÄ" * 25 + "‚î¥" + "‚îÄ" * 30 + "‚îò")
                    print(f"{Colors.ENDC}")
                else:
                    print(f"{Colors.WARNING}‚ÑπÔ∏è No hay clientes registrados.{Colors.ENDC}")
            except sqlite3.Error as e:
                print(f"{Colors.FAIL}‚ùå Error al listar clientes: {e}{Colors.ENDC}")

        elif opcion == 3:
            print(f"{Colors.OKBLUE}‚úèÔ∏è Actualizar cliente{Colors.ENDC}")
            identificador = input(f"{Colors.WARNING}üî¢ ID del cliente a actualizar: {Colors.ENDC}").strip()
            if not identificador.isdigit():
                print(f"{Colors.FAIL}‚ùå El identificador debe ser un n√∫mero v√°lido.{Colors.ENDC}")
                continue

            datos = prompt_client_info()
            if datos is None:
                continue
            nombre, apellidos, email = datos

            try:
                cursor.execute(
                    """
                    UPDATE clientes 
                    SET nombre = ?, apellidos = ?, email = ?
                    WHERE identificador = ?
                    """,
                    (nombre, apellidos, email, int(identificador))
                )
                conexion.commit()
                if cursor.rowcount > 0:
                    print(f"{Colors.OKGREEN}‚úÖ Cliente actualizado con √©xito.{Colors.ENDC}")
                else:
                    print(f"{Colors.WARNING}‚ÑπÔ∏è No se encontr√≥ cliente con ese identificador.{Colors.ENDC}")
            except sqlite3.Error as e:
                print(f"{Colors.FAIL}‚ùå Error al actualizar cliente: {e}{Colors.ENDC}")

        elif opcion == 4:
            print(f"{Colors.OKBLUE}üóëÔ∏è Eliminar cliente{Colors.ENDC}")
            identificador = input(f"{Colors.WARNING}üî¢ ID del cliente a eliminar: {Colors.ENDC}").strip()
            if not identificador.isdigit():
                print(f"{Colors.FAIL}‚ùå El identificador debe ser un n√∫mero v√°lido.{Colors.ENDC}")
                continue

            try:
                cursor.execute(
                    "DELETE FROM clientes WHERE identificador = ?",
                    (int(identificador),)
                )
                conexion.commit()
                if cursor.rowcount > 0:
                    print(f"{Colors.OKGREEN}üóëÔ∏è Cliente eliminado con √©xito.{Colors.ENDC}")
                else:
                    print(f"{Colors.WARNING}‚ÑπÔ∏è No se encontr√≥ cliente con ese identificador.{Colors.ENDC}")
            except sqlite3.Error as e:
                print(f"{Colors.FAIL}‚ùå Error al eliminar cliente: {e}{Colors.ENDC}")

        elif opcion == 5:
            search_clients(cursor)

        elif opcion == 6:
            print(f"{Colors.HEADER}üëã ¬°Hasta luego! Que tengas un gran d√≠a.{Colors.ENDC}")
            break

        else:
            print(f"{Colors.FAIL}‚ùå Opci√≥n no v√°lida. Por favor, escoge un n√∫mero entre 1 y 6.{Colors.ENDC}")

    cursor.close()
    conexion.close()

if __name__ == "__main__":
    main()
